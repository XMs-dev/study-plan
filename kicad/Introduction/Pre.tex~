\section{Предисловие}\label{kicad:introduction:pre}
Планируемый курс должен научить слушателей разводить печатные платы в KiCAD. В качестве устройства для примере предлагаю использовать USB-программатор для AVR микроконтроллеров. В идеале в дальнейшем хотелось бы добавить информациии о том как проектируются радиоэлектронные устройства (QUCS, ngSPICE), а также как программировать микроконтроллеры.

KiCAD был выбран тем,что обладает доработанным интерфейсом и привычен пользователям, а главное он обладает русскоязычной документацией и русским комьюнити.

Программатор http://easyelectronics.ru/skorostnoj-avr-usb-programmator-na-ft232rl-bez-vspomogatelnogo-kontrollera.html

Курс будет состоять из двух циклов, базовая часть и дополнительные сведения. Материалы и РЭ слушатели покупают на свои собственные деньги. 

\section{Первое занятие} 


Приступим к изучению «разводки» печатных плат. Что это такое, своими словами, это будет как, создание реального устройства — печатной платы из принципиальной схемы радиоэлектронного устройства.  На современных предприятиях эта профессия выделена отдельно, так количество компонентов возросло а  их габариты уменьшились. В проектирование печатных плат есть свои особенности, так толщины дорожек зависят от максимального тока проходящего через них, зазоры между дорожками от максимальной разности напряжений и проводимости диэлектрика. Также в высокочастотных схемах, на задержку сигнала влияет не только длина дорожек но и их форма.

Т.к. наши курсы посвящены Свободному программному обеспечению ,  то и рассказывать я буду  про свободные программы.

Выбирать тут придется из двух программ это GNU EDA и KiCAD , мы выбрали последнее так как KiCAD ,обладает документацией на русском и русскоязычным  сообщество, из достоинств оппонента хочется упомянуть интегрированную среду для анализа работы схемы основанную на  ngSPICE. 

Целью первого цикла наших занятий будет создание простейшего  USB программатора для AVR микроконтроллеров. И хотя с практической стороны сейчас большую популярность набираю ARM микроконтроллеры (из-за цены и мощностей), работа с ними более специфична и зависит от производителя.

\subsection{Установка KiCAD} 

Начнем с установки необходимых компонентов.

Есть множество вариантов, простейший это поставить из репозитория вашего дистрибутивы, проблемы сборки под ОС типа Windows и Mac OS X  мы не рассматриваем, хотя они несомненно существуют. Недостаток версии установленной из  репозитория в том то она устарела, в ней может не быть некоторых компонентов, так в последних версиях тестовой ветки добавили , новых формат для хранения плат, возможность работать с точностью сетки до нанометров а также возможность писать сценарии для kicad на python, также отключены настройки создающие рамку по ГОСТ и дополнительные поля пецификации.

Поэтому опишу процесс сборки KiCAD на вашей машине

нам понадобятся
\begin{itemize}
\item утилита работы с распредеенной системой контроля версий- bazaar
\item макро пакет включающий утилиты для сборки build-essential
\item программа для создания конфигурационных файло, а также файла автоматической сборки cmake
\item кросплатформенные графические библиотеки -wxwidget 2.8.11
\item набор библиотек для  для C++ -boost
\item пакет pngcrush
\end{itemize}

Инструкция по сборке, для начало нам необходимо выкачать исходники\\
\texttt{~ bzr branch lp:kicad kicad.bzr}\\
\texttt{~ cd kicad.bzr/}\\
\texttt{~ mkdir build}\\
\texttt{~ cd build/}\\

Дело в том что разработчики, редко обновляют файл INSTALL.txt, поэтому обо всех дополнительных опциях компиляции приходиться разбираться вручную, для этого введем\\
\texttt{~ cmake -i ..}\\
Здесь появится список опций компиляции и то как они установлены.\\
\texttt{Variable Name: KICAD\_GOST\\
Description: enable/disable building using GOST notation for multiple gates per package (default OFF)\\
Current Value: ON}\\
Этв опция отвечает за создание рамок чертежей, по ГОСТ, а также создание дополнительных полей для компонентов принципиальной схемы, это нужно чтобы автоматически сгенерировать спецификацию деталей.
\texttt{
Variable Name: KICAD\_SCRIPTING\\
Description: set this option ON to build the scripting support inside kicad binaries\\
Current Value: ON
}\\
\texttt{
Variable Name: KICAD\_SCRIPTING\_MODULES\\
Description: set this option ON to build kicad modules that can be used from scripting languages\\
Current Value: ON
}\\
\texttt{
Variable Name: KICAD\_SCRIPTING\_WXPYTHON\\
Description: set this option ON to build wxpython implementation for wx interface building in python and py.shell\\
Current Value: ON
}\\
Все это опции для подключения работы движка позволяющего писать скрипты и свои инструменты встраивая их в KiCAD , в том числе и инструменты с GUI\\
\texttt{
Variable Name: KICAD\_TESTING\_VERSION
Description: set this option to ON to build the stable version of KICAD. mainly used to set version ID (default OFF)\\
Current Value: ON
}\\
Обязательный флаг , говорит о том что мы собираем тестовую версию kicad\\
\texttt{
Variable Name: USE\_PCBNEW\_NANOMETRES\\
Description: Use nanometers for Pcbnew internal units instead of deci-mils (default OFF).\\
Current Value: ON
}\\
\texttt{
Variable Name: USE\_PCBNEW\_SEXPR\_FILE\_FORMAT\\
Description: Use s-expression Pcbnew file format support (default OFF).\\
Current Value: ON
}\\
Последние изменения и хотелось бы проектировать, сразу используя их, нанометры померили между собой имперскую дюймовую сетку и европейскую сетку(которую используем мы), с шагами в миллиметры. Второй флаг позволяет работать с новым форматом хранения плат, этот формат создается с рассчетом совместной сетевой работы.\\
\texttt{
Variable Name: wxUSE\_UNICODE\\
Description: enable/disable building unicode (default OFF)\\
Current Value: ON
}\\
Подключение юникода, не англоязычным пользователем, никогда не мешало.

Далее вам необходимо запустить компиляцию\\
\texttt{~ make}\\
А на многоядерных процессорах с числом ядер \textbf{Х} , можете запустить команду с числом \textbf{X+1}\\
\texttt{~ make -j X+1}


